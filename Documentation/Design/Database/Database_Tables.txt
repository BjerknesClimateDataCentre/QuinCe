% QuinCe Database Tables

# Version History

Version      Date                     Description
---------    ----------------------   ------------------------------------------------------
alpha1       2017-03-16               2017-03-16
xx           xx                       Redesign of database to handle instruments with multiple data files, and processing data by crossing instead of by data file.

# Introduction
This document specifies the database tables that are used in the QuinCe project.

Field names followed by stars indicate primary keys. Multiple fields are sometimes combined to produce
a compound primary key.

The field type F_KEY indicates a lookup to a value in another table. The table in question will be
made clear in the field description.

## A note on dates and times

To remove complications related to time zones, all dates and times related to data will be stored in the database
as milliseconds since the epoch in UTC.


# Users
This section defines tables related to users and the different parts
of the system they are linked to.

## `user`
Defines a user account

Field                    Type           Description
--------------------     ------------   ---------------------------------------------------
email*                   String         The user's email address - used as the username
salt                     Binary         The salt used for the password
password                 Binary         Password field (salted and hashed)
first_name               String         The user's first/given name
surname                  String         The user's surname
email_code               String         Code for verifying email address
email_code_time          DateTime       The time that the email verification code was generated
password_code            String         Code for resetting password
password_code_time       DateTime       The time that the password reset code was generated
permissions              Integer        A field for defining user permissions. Defined as a bitmask.
preferences              String         The user's preferences

#### Permissions
The permissions that can be applied to a user are as follows:

Bit     Meaning
---     -----------
1       Job manager

# Instruments
The definition of an instrument is quite complex and requires multiple tables

## `instrument`
This table defines the basic details of an instrument.

We allow up to three sensors of each type to be defined. They are treated as
separate fields in violation of third normal form, but the amount of processing
required to handle dynamically defined sensors would be prohibitive.

The table also defines which columns contain which data in an instrument's data
files. Entries are supplied for all the possible formatting options. Those that
aren't needed will be left empty.

Field                    Type           Description
--------------------     ------------   --------------------------------------------------------------------------------------
id*                      Integer        ID
owner                    F_KEY          The ID of the user who owns this instrument
name                     String         The name of the instrument
pre_flushing_time        Integer        The number of seconds' worth of measurements to discard at the start of each run type
post_flushing_time       Integer        The number of seconds' worth of measurements to discard at the end of each run type
averaging_mode           Integer        The method used for averaging measurements

## `file_definition`
This table defines the layout of data files used with a given instrument. This definition will be
set up by the user when they define their instrument.

An instrument may have only one data file, or it may have multiple files if
different data comes from different places.

Columns indices for the date/time and position are stored in this table, since they are universal
for all instrument types. Other column details are stored in the child `file_columns` table.

All files must contain date/time information, while position information is optional. The date/time columns
will only be partially populated, depending on the format of the file. The layout of the file can be inferred from
the columns that are populated, and individual formats (where required) are stored in the properties column. These
properties are formatted as `name=value;name=value;...`

Field                        Type           Description
--------------------         ------------   --------------------------------------------------------------------------------------
id*                          Integer        ID
instrument_id                F_KEY          ID of the instrument that this data file belongs to
description                  String         File description
column_separator             String         Column separator
header_type					 Integer        How the header is defined (number of lines or the last line string)
header_lines                 Integer        Number of lines in the file header
header_end_string            String         The line that indicates the end of the file header
column_header_rows           Integer        The number of column header rows in the file
column_count                 Integer        Number of colums in the file
lon_format                   Integer        Format of the longitude
lon_value_col                Integer        Column where the longitude value is stored
lon_hemisphere_col           Integer        Column where the longitude hemisphere is stored 
lat_format                   Integer        Format of the latitude
lat_value_col                Integer        Column where the latitude value is stored
lat_hemisphere_col           Integer        Column where the latitude hemisphere is stored 
date_time_col                Integer        Column where a combined date/time string is stored
date_time_props              String         Properties for the `date_time` column
date_col                     Integer        Column where a date string is stored
date_props                   String         Properties for the `date` column
hours_from_start_col         Integer        Column where the time as Hours from Start of File value is stored
hours_from_start_props       String         Properties for the `hours_from_start` column
jday_time_col                Integer        Column where the combined Julian Day/Decimal Time value is stored
jday_col                     Integer        Column where the Julian Day is stored
year_col                     Integer        Column where the year is stored
month_col                    Integer        Column where the month is stored
day_col                      Integer        Column where the day is stored
time_col                     Integer        Column where the time string is stored
time_props                   String         Properties for the `time` column
hour_col                     Integer        Column where the hour is stored
minute_col                   Integer        Column where the minute is stored
second_col                   Integer        Column where the second is stored

#### `lon_format`
The `lon_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        0 to 360
1        -180 to 180
2        0 to 180, with E/W in a separate column

#### `lat_format`
The `lat_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        -90 to 90
1        0 to 90, with N/S in a separate column

## `file_column`
This table will contains details of the columns present in a given
file definition

Field                    Type           Description
--------------------     ------------   -----------------------------------------------------------------
file_definition_id*      F_KEY          The ID of the file definition
file_column*             Integer        Column where this sensor's value can be found in the data file
sensor_type              String         Name of the sensor type, as identified in the `sensor_config.csv` file
sensor_name              String         Name of this column as it will be displayed in QuinCe
primary_sensor           Boolean        Indicates whether or not this is a primary sensor
value_column             Integer        Position at which this value will be stored in the `voyage_data` table
depends_question_answer  Boolean        Answer to the Depends Question (see `SensorType` class)
missing_value            String         Value that indicates a missing value (`NaN`, `-999` etc.)
post_calibrated          Boolean        Indicates whether values need to be calibrated by QuinCe

## `run_type`
Each instrument will have a number of run types, for measurements, gas standards etc.

This table will hold details of which values in the
`run_type` column (as defined in the `file_definition` table) correspond to which run types.

The run types will be specific to each application, and will be defined in the `run_types_config.csv`
file. This file defines a code for each run type that will be stored in the `run_type` column.

Field                    Type           Description
--------------------     ------------   -----------------------------------------------------------------
file_definition_id*      F_KEY          File Definition ID
name*                    String         The value from the `run_type` column in the Columns table
category_code            String         The run type category code

## `calibration`
Each calibration (gas standard, sensor calibration etc.) is stored in this table.

The `type` field indicates the type of calibration, and the `target` field specifies the individual item
being calibrated (the specific gas standard or sensor).

A calibration may consist of multiple values (e.g. the equation coefficients for a sensor calibration).
These values will be stored in a text field as a semi-colon separated list of values. The application
code will perform the conversion during the read/write phases.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
instrument_id*           F_KEY          Instrument ID
type*                    String         Calibration type
target*                  String         Name of the target of this calibration
deployment_date*         DateTime       Date/time of calibration. Stored as a milliseconds value.
values                   String         The values for the calibration. See above.
class                    String         The Java class of the calibration


# Data Files
This section describes the tables used to hold data as it is processed to calculate and
QC the CO~2~ measurements.

## `data_file`
This table holds details of the raw data files held in the system.
Sections of these files will be used to construct voyages/deployments

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id*                      Integer        Data file ID
file_definition_id       F_KEY          File definition describing the format of the file
filename                 String         Original filename
start_date               DateTime       Date/Time of the first record in the file
end_date                 DateTime       Date/Time of the last record in the file
record_count             Integer        Number of records in the file

## `dataset`
This table will define a data set. It will not contain any data,
but its contents will be used to determine which data should be
extracted from uploaded data files to be made part of the data set.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id*                      Integer        Data set ID
instrument_id            F_KEY          The instrument for which this data set is defined
name                     String         Data set name
start                    DateTime       The start date and time of the data set
end                      DateTime       The end date and time of the data set
status                   Integer        The current processing state of the data set
properties               String         Miscellaneous properties related to the data set
last_touched             DateTime       Date/Time that the data set was last used

#### `status`
As a voyage's data is processed, it will go through a number of stages. The actions that can be performed
for a voyage will vary at each stage. Stages are likely to include:

* Data extraction
* Automatic initial data check
* Pre-calculation user QC
* Calculation
* Automatic post-calculation QC
* User post-calculation QC

## `dataset_data`
After a data set is defined, the relevant data will be extracted from the data files and stored in this table.
The data reduction and QC performed by QuinCe will be based on this data.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id*                      Integer        Primary Key
dataset_id               F_KEY          The data set to which this data relates
time*                    DateTime       The date/time of the record
longitude                Float          The longitude at which the record was taken
latitude                 Float          The latitude at which the record was taken
run_type                 String         The run type for this record
diagnostic_values        String         A serialized Java `Properties` object containing values from the diagnostic sensors
sensor_type_value**      Double         Values extracted from the data files

**One `sensor_type_value` field will be creted in the table for each sensor defined in the
Sensors Configuration for the application (this implies that the database schema must be
custom-built for each application). It will be filled in according from data extracted
from the files in the `dataset`, with any averaging, fallbacks, missing values etc. applied.

## _`calibration_data`_
This table will hold data used for calibration. For many systems these will be identified by the Run Type
in the raw data file; for others, calibration values will be entered manually. Note that this is different to
the sensor calibrations stored in the `calibration` table.

The exact data stored in this table will depend on the type of data being processed.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id*                      Integer        Primary Key
dataset_id               F_KEY          The data set to which this calibration data relates
time*                    DateTime       The date/time when the calibration data was recorded
calibration_value**      Double         The calibration value
use                      Boolean        Indicates whether or not this calibration record should be used
use_message              String         Reason for not using this calibration record

**One `calibration_value` field will exist for each type of calibration data that can be used.


## _`calculation_data`_
Each calculation defined for the application (e.g. pCO<sub>2</sub> or pH) will have its own table in the application.
The calculation routine will be responsible for knowing what table name it uses, and what fields are in that table.
(Similarly, the calculation routine must also know which sensor fields are in the `dataset_data` table.) Each calculation
table must contain at least the following fields:

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
measurement_id*          F_KEY          The row in `dataset_data` on which this calculation is based
auto_qc_flag             Integer        The QC flag assigned by the automatic QC routines
auto_qc_message          String         The message(s) from the automatic QC routines
woce_flag                Integer        The WOCE flag assigned by the user
woce_comment             String         The WOCE comment

The actual calculation fields will depend on the type of data being processed.


# Jobs
The majority of the data processing performed by QuinCe will be done by background tasks,
which will be managed within the database.

## `job`
Each background task will have a row in this table.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
job_id*                  Integer        Job ID
owner                    F_KEY          The user id of the owner of the job
submitted                DateTime       The date and time on which the job was submitted
class                    String         The class name of the job to be run
parameters               String         The parameters to be passed to the job when it is run
status                   ENUM           The current status of the job (WAITING, RUNNING, FINISHED, ERROR, KILLED)
started                  DateTime       The time when the job was started
ended                    DateTime       The time when the job completed
thread_name              String         The name of the thread which is running the job
progress                 Float          The progress of the job, expressed as a percentage
stack_trace              String         Used to store a stack trace in the event of an error

#### `class`
Each job will be executed by a specific Java class. Its name will be stored here.

#### `parameters`
The job's parameters will be stored as a simple string. If a job requires multiple
parameters, they will be separated by a semi-colon.

#### `status`
The status will have one of the following values:

Value    Status
-----    --------------------------
0        Queued (waiting to run)
1        Running
2        Finished
3        Error

#### `thread_name`
Jobs will be run as new threads within the system. Each thread will be named
according to the job it is running, and its name will be stored in the database
so the system can monitor whether the thread as died and left the job in a bad
state. In such situations the job will be returned to the queue to be re-run.
