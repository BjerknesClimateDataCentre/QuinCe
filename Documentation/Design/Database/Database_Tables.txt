% QuinCe Database Tables

# Version History

Version      Date                     Description
---------    ----------------------   ------------------------------------------------------
alpha1       2017-03-16               2017-03-16
xx           xx                       Redesign of database to handle instruments with multiple data files, and processing data by crossing instead of by data file.

# Introduction
This document specifies the database tables that are used in the QuinCe project.

# Users
This section defines tables related to users and the different parts
of the system they are linked to.

## `user`
Defines a user account

Field                    Type           Description
--------------------     ------------   ---------------------------------------------------
email                    String         The user's email address - used as the username
salt                     Binary         The salt used for the password
password                 Binary         Password field (salted and hashed)
first_name               String         The user's first/given name
surname                  String         The user's surname
email_code               String         Code for verifying email address
email_code_time          DateTime       The time that the email verification code was generated
password_code            String         Code for resetting password
password_code_time       DateTime       The time that the password reset code was generated
permissions              Integer        A field for defining user permissions. Defined as a bitmask.

#### Permissions
The permissions that can be applied to a user are as follows:

Bit     Meaning
---     -----------
1       Job manager

# Instruments
The definition of an instrument is quite complex and requires multiple tables

## `instrument`
This table defines the basic details of an instrument.

We allow up to three sensors of each type to be defined. They are treated as
separate fields in violation of third normal form, but the amount of processing
required to handle dynamically defined sensors would be prohibitive.

The table also defines which columns contain which data in an instrument's data
files. Entries are supplied for all the possible formatting options. Those that
aren't needed will be left empty.

Field                    Type           Description
--------------------     ------------   --------------------------------------------------------------------------------------
id                       Integer        ID
owner                    F_KEY          The ID of the user who owns this instrument
name                     String         The name of the instrument
pre_flushing_time        Integer        The number of seconds' worth of measurements to discard at the start of each run type
post_flushing_time       Integer        The number of seconds' worth of measurements to discard at the end of each run type

## `file_definition`
This table defines the layout of data files used with a given instrument. This definition will be
set up by the user when they define their instrument.

An instrument may have only one data file, or it may have multiple files if
different data comes from different places.

Columns indices for the date/time and position are stored in this table, since they are universal
for all instrument types. Other column details are stored in the child `file_columns` table.

Field                    Type           Description
--------------------     ------------   --------------------------------------------------------------------------------------
id                       Integer        ID
instrument_id            F_KEY          The ID of the instrument that this data file belongs to
primary_file             Boolean        Indicates whether or not this is the primary data file for the instrument. This is
                                        decided by QuinCe and is implementation-specific.
date_format              Integer        The date format used in the instrument's data files
time_format              Integer        The time format used in the instrument's data files
date_col                 Integer        Date column (all parts in one column)
year_col                 Integer        Year column
month_col                Integer        Month column
day_col                  Integer        Day column
time_col                 Integer        Time column (all parts in one column)
hour_col                 Integer        Hour column
minute_col               Integer        Minute column
second_col               Integer        Second column
has_position             Boolean        Indicates whether or not this file contains position information
lon_format               Integer        The longitude format used in the instrument's data files
lat_format               Integer        The latitude format used in the instrument's data files
latitude_col             Integer        Latitude column
north_south_col          Integer        Latitude direction (N/S) column
longitude_col            Integer        Longitude column
east_west_col            Integer        Longitude direction (E/W) column
run_type_col             Integer        The column in which run type indentifiers are stored

#### `date_format`
The `date_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        Separate columns for year, month and day
1        YYYYMMDD
2        DD/MM/YY
3        DD/MM/YYYY
4        MM/DD/YY
5        MM/DD/YYYY

#### `time_format`
The `time_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        Separate fields for hour, minute and second
1        HHMMSS
2        HH:MM:SS

#### `lat_format`
The `lat_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        -90 to 90
1        0 to 90, with N/S in a separate column

#### `lon_format`
The `lon_format` field will have one of the following values:

Value    Format
-----    --------------------------
0        0 to 360
1        -180 to 180
2        0 to 180, with E/W in a separate column


## `file_columns`
This table will contains details of the columns present in a given
file definition

Field                    Type           Description
--------------------     ------------   -----------------------------------------------------------------
file_definition_id       F_KEY          The ID of the file definition
sensor_type              String         The name of the sensor type, as identified in the `sensor_config.csv`file
column_name              String         The name of this column as it will be displayed in QuinCe
column_index             Integer        The column where this sensor's value can be found in the data file
missing_value            String         Value that indicates a missing value (`NaN`, `-999` etc.)
value_index              Integer        The position at which this value will be stored in the `voyage_data` file

## `run_types`
Each instrument will have a number of run types, for measurements, gas standards etc.

This table will hold details of which values in the
`run_type` column (as defined in the `file_definition` table) correspond to which run types.

Field                    Type           Description
--------------------     ------------   -----------------------------------------------------------------
id                       Integer        ID
instrument_id            F_KEY          Instrument ID
run_name                 String         The value from the `run_type` column in the Columns table
~~type~~                 ~~Integer~~    ~~The run type~~

##### `type`
~~The `type` column will contain one of the following values:~~

~~Value~~    ~~Run type~~
---------    --------------------------
~~-1~~       ~~Not used~~
~~0~~        ~~Sea water CO~2~~~
~~1~~        ~~Atmospheric CO~2~~~
~~2~~        ~~Gas standard~~

## `gas_standard_deployment`
Each gas standard is supplied at a specific concentration, which may vary between
cylinders. This table will store records of when each gas standard is deployed.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
concentration_id         Integer        ID
instrument_id            F_KEY          Instrument ID
deployment_date          Date           The date on which the standard was deployed
standard_name            String         The name of the standard (from the `run_types` table)
concentration            Float          The concentration of the standard

## `calibration`
Each sensor in an instrument must be periodically calibrated. In some instruments,
this calibration is not applied to the raw data, and so the adjustments must be made
within QuinCe.

It is also possible that some values are reported in millivolts or similar, and must
be converted to the true units of the parameter being measured. The calibrations table
can be dual-purposed for this eventuality.

Each calibration will be defined as a polynomial curve with up to five harmonics.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id                       Integer        ID
instrument_id            F_KEY          Instrument ID
caibration_date          Date           The date of the calibration
sensor_file              F_KEY          The ID of the file in which this sensor is defined
sensor_column            Integer        The column in which this sensor's data is found in the specified file
intercept                Float          The intercept of the calibration curve
x                        Float          Slope
x2                       Float          Second harmonic
x3                       Float          Third harmonic
x4                       Float          Fourth harmonic
x5                       Float          Fifth harmonic

#### `sensor`
The `sensor` field will identify the sensor that the calibration is for.
It will be of the form `<sensortype>_<sensornumber>` (there can be up to three sensors of each type).

`sensor_type` will be one of:

Digit      Value
-----      -----
0          Intake temperature
1          Salinity
2          Equilibrator temperature
3          Equilibrator pressure

The second digit will be in the range 1-3. Therefore a `sensor` field value of
`3_2` indicates the second equilibrator pressure sensor.

# Data Files
This section describes the tables used to hold data as it is processed to calculate and
QC the CO~2~ measurements.

## `voyage`
This table will define a voyage. Itwill not contain any data,
but its contents will be used to determine which data should be
extracted from uploaded data files to be made part of the voyage.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
id                       Integer        The voyage ID
instrument_id            F_KEY          The instrument for which this voyage is defined
start                    DateTime       The start date and time of the voyage
end                      DateTime       The end date and time of the voyage
status                   Integer        The current processing state of the voyage
properties               String         Miscellaneous properties related to the voyage

#### `status`
As a voyage's data is processed, it will go through a number of stages. The actions that can be performed
for a voyage will vary at each stage. Stages are likely to include:

* Data extraction
* Initial data check
* Data reduction
* Automatic QC
* User QC

## `voyage_data`
After a voyage is defined, the relevant data will be extracted from the data files and stored in this table.
The data reduction and QC performed by QuinCe will be based on this data.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
voyage_id                F_KEY          The voyage to which this data relates
time                     DateTime       The date/time of the record
longitude                Float          The longitude at which the measurement was taken
latitude                 Float          The latitude at which the measurement was taken
run_type                 F_KEY          The run type for this measurement
value0
.
.
value255                 Float          Fields to contain data values. The values stored will vary between instruments
qc_flag                  Integer        The QC flag assigned to the data during initial data checks
qc_comment               String         Reasons for the `qc_flag` being set to its value

## `calculation_data`
This table will hold the results of calculations performed on the `voyage_data`, including
any intermediate results that are required. It will also hold the results of the automatic and
user QC process.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
voyage_id                F_KEY          The voyage to which this data relates
time                     DateTime       The date/time of the record
longitude                Float          The longitude at which the measurement was taken
latitude                 Float          The latitude at which the measurement was taken
run_type                 F_KEY          The run type for the measurement
value0
.
.
value255                 Float          Calculation values. These will vary according to the type of calculation being performed.
qc_flag                  Integer        The QC flag assigned by the automatic QC routines
qc_message               String         The message(s) from the automatic QC routines
woce_flag                Integer        The WOCE flag assigned by the user
woce_comment             String         The WOCE comment


# Jobs
The majority of the data processing performed by QuinCe will be done by background tasks,
which will be managed within the database.

## `job`
Each background task will have a row in this table.

Field                    Type           Description
--------------------     ------------   -------------------------------------------------------------------------
job_id                   Integer        Job ID
owner                    F_KEY          The user id of the owner of the job
submitted                DateTime       The date and time on which the job was submitted
class                    String         The class name of the job to be run
parameters               String         The parameters to be passed to the job when it is run
status                   ENUM           The current status of the job (WAITING, RUNNING, FINISHED, ERROR, KILLED)
started                  DateTime       The time when the job was started
ended                    DateTime       The time when the job completed
thread_name              String         The name of the thread which is running the job
progress                 Float          The progress of the job, expressed as a percentage
stack_trace              String         Used to store a stack trace in the event of an error

#### `class`
Each job will be executed by a specific Java class. Its name will be stored here.

#### `parameters`
The job's parameters will be stored as a simple string. If a job requires multiple
parameters, they will be separated by a semi-colon.

#### `status`
The status will have one of the following values:

Value    Status
-----    --------------------------
0        Queued (waiting to run)
1        Running
2        Finished
3        Error

#### `thread_name`
Jobs will be run as new threads within the system. Each thread will be named
according to the job it is running, and its name will be stored in the database
so the system can monitor whether the thread as died and left the job in a bad
state. In such situations the job will be returned to the queue to be re-run.
