package uk.ac.exeter.QuinCe.data;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import uk.ac.exeter.QCRoutines.config.ColumnConfig;
import uk.ac.exeter.QCRoutines.data.DataRecord;
import uk.ac.exeter.QCRoutines.data.DataRecordException;
import uk.ac.exeter.QCRoutines.data.NoSuchColumnException;
import uk.ac.exeter.QCRoutines.messages.Flag;
import uk.ac.exeter.QCRoutines.messages.Message;
import uk.ac.exeter.QCRoutines.messages.MessageException;

/**
 * An implementation of the QC Routines DataRecord class for QuinCe
 * 
 * The QCRecord has two sets of flags and comments:
 * 
 * QC Flag & QC Comments are filled in by the automatic QC routines
 * WOCE Flag & WOCE Comments are supplied by the user (but may be given
 * preliminary values by the automatic QC)
 * 
 * The WOCE flag will be used as the DataRecord flag, since this is the
 * final value set by the user, and must be adhered to by any code that wants
 * to know the good/bad/questionable state of the record (the automatic QC only
 * ever suggests the flag to be used).
 * 
 * The messages generated by the automatic QC are exclusively tied to the Message
 * objects, while the WOCE comments can be edited by the user.
 * 
 * This makes life a little confusing. So, here's a summary
 * 
 * QC Flag - stored in this class
 * QC Comments - Stored as Message objects in the parent DataRecord class (use addMessage etc.)
 * WOCE Flag - The flag for the parent DataRecord
 * WOCE Comments - a simple String stored in this class
 * 
 * @author Steve Jones
 *
 */
public class QCRecord extends DataRecord {
	
	private long dataFileId;
	
	private Instrument instrument;
	
	private Flag qcFlag = Flag.NOT_SET;
	
	private Flag woceFlag = Flag.NOT_SET;
	
	private String woceComment;
	
	public QCRecord(long dataFileId, Instrument instrument, ColumnConfig columnConfig, int lineNumber, List<String> dataFields, Flag qcFlag, List<Message> qcComments, Flag woceFlag, String woceComment) throws DataRecordException, MessageException {
		super(lineNumber, columnConfig, dataFields);
		this.dataFileId = dataFileId;
		this.instrument = instrument;
		this.qcFlag = qcFlag;
		setMessages(qcComments);
		this.woceFlag = woceFlag;
		this.woceComment = woceComment;
	}

	@Override
	public DateTime getTime() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getLongitude() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getLatitude() {
		// TODO Auto-generated method stub
		return 0;
	}

	public long getDataFileId() {
		return dataFileId;
	}
	
	public static String getColumnDisplayName(String columnName, Instrument instrument) {
		// TODO Make display names
		return "TO DO!";
	}
	
	public String getColumnDisplayName(String columnName) {
		return getColumnDisplayName(columnName, instrument);
	}
	
	public Flag getQCFlag() {
		return qcFlag;
	}
	
	public void setQCFlag(Flag flag) {
		this.qcFlag = flag;
	}
	
	public Flag getWoceFlag() {
		return woceFlag;
	}
	
	public void setWoceFlag(Flag flag) {
		woceFlag = flag;
	}
	
	public String getWoceComment() {
		return woceComment;
	}
	
	public void setWoceComment(String woceComment) {
		this.woceComment = woceComment;
	}

	@Override
	public void addMessage(Message message) throws NoSuchColumnException {
		super.addMessage(message);
		
		if (message.getFlag().moreSignificantThan(qcFlag)) {
			qcFlag = message.getFlag();
		}
	}
	
	public void clearQCData() {
		messages = new ArrayList<Message>();
		setQCFlag(Flag.GOOD);
	}
}
