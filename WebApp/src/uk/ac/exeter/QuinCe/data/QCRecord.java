package uk.ac.exeter.QuinCe.data;

import java.util.ArrayList;
import java.util.List;

import org.joda.time.DateTime;

import uk.ac.exeter.QCRoutines.data.DataRecord;
import uk.ac.exeter.QCRoutines.data.DataRecordException;
import uk.ac.exeter.QCRoutines.messages.Flag;
import uk.ac.exeter.QCRoutines.messages.Message;
import uk.ac.exeter.QCRoutines.messages.MessageException;

/**
 * An implementation of the QC Routines DataRecord class for QuinCe
 * 
 * The QCRecord has two sets of flags and comments:
 * 
 * QC Flag & QC Comments are filled in by the automatic QC routines
 * WOCE Flag & WOCE Comments are supplied by the user (but may be given
 * preliminary values by the automatic QC)
 * 
 * The WOCE flag will be used as the DataRecord flag, since this is the
 * final value set by the user, and must be adhered to by any code that wants
 * to know the good/bad/questionable state of the record (the automatic QC only
 * ever suggests the flag to be used).
 * 
 * The messages generated by the automatic QC are exclusively tied to the Message
 * objects, while the WOCE comments can be edited by the user.
 * 
 * This makes life a little confusing. So, here's a summary
 * 
 * QC Flag - stored in this class
 * QC Comments - Stored as Message objects in the parent DataRecord class (use addMessage etc.)
 * WOCE Flag - The flag for the parent DataRecord
 * WOCE Comments - a simple String stored in this class
 * 
 * @author Steve Jones
 *
 */
public class QCRecord extends DataRecord {

	public static final String COL_CO2_TYPE = "CO2 Type";
	
	public static final String COL_DATE = "Date";
	
	public static final String COL_LONGITUDE = "Longitude";
	
	public static final String COL_LATITUDE = "Latitude";
	
	public static final String COL_INTAKE_TEMP_1 = "INTAKE_TEMP_1";
	
	public static final String COL_INTAKE_TEMP_2 = "INTAKE_TEMP_2";
	
	public static final String COL_INTAKE_TEMP_3 = "INTAKE_TEMP_3";
	
	public static final String COL_SALINITY_1 = "SALINITY_1";
	
	public static final String COL_SALINITY_2 = "SALINITY_2";
	
	public static final String COL_SALINITY_3 = "SALINITY_3";
	
	public static final String COL_EQT_1 = "EQT_1";
	
	public static final String COL_EQT_2 = "EQT_2";
	
	public static final String COL_EQT_3 = "EQT_3";
	
	public static final String COL_EQP_1 = "EQP_1";
	
	public static final String COL_EQP_2 = "EQP_2";
	
	public static final String COL_EQP_3 = "EQP_3";
	
	public static final String COL_MOISTURE = "Moisture";
	
	public static final String COL_ATMOSPHERIC_PRESSURE = "Atmospheric Pressure";
	
	public static final String COL_CO2 = "CO2";
	
	public static final String COL_MEAN_INTAKE_TEMP = "Intake Temperature (Mean)";
	
	public static final String COL_MEAN_SALINITY = "Salinity (Mean)";
	
	public static final String COL_MEAN_EQT = "Equilibrator Temperature (Mean)";
	
	public static final String COL_MEAN_EQP = "Equilibrator Pressure (Mean)";
	
	public static final String COL_TRUE_MOISTURE = "True Moisture";
	
	public static final String COL_DRIED_CO2 = "Dried CO2";
	
	public static final String COL_CALIBRATED_CO2 = "Calibrated CO2";
	
	public static final String COL_PCO2_TE_DRY = "Dry pCO2 at Equilibrator Temperature";
	
	public static final String COL_PH2O = "pH2O";
	
	public static final String COL_PCO2_TE_WET = "pCO2 at 100% Humidity";
	
	public static final String COL_FCO2_TE = "fCO2 at Equilibrator Temperature";
	
	public static final String COL_FCO2 = "fCO2 at SST";
	
	public static final String COL_INTAKE_TEMP_1_USED = "INTAKE_TEMP_1_USED";
	
	public static final String COL_INTAKE_TEMP_2_USED = "INTAKE_TEMP_2_USED";
	
	public static final String COL_INTAKE_TEMP_3_USED = "INTAKE_TEMP_3_USED";
	
	public static final String COL_SALINITY_1_USED = "SALINITY_1_USED";
	
	public static final String COL_SALINITY_2_USED = "SALINITY_2_USED";
	
	public static final String COL_SALINITY_3_USED = "SALINITY_3_USED";
	
	public static final String COL_EQT_1_USED = "EQT_1_USED";
	
	public static final String COL_EQT_2_USED = "EQT_2_USED";
	
	public static final String COL_EQT_3_USED = "EQT_3_USED";
	
	public static final String COL_EQP_1_USED = "EQP_1_USED";
	
	public static final String COL_EQP_2_USED = "EQP_2_USED";
	
	public static final String COL_EQP_3_USED = "EQP_3_USED";
	
	private List<String> fieldValues;
	
	private static List<String> columnNames = null;
	
	private long dataFileId;
	
	private Instrument instrument;
	
	private Flag qcFlag = Flag.NOT_SET;
	
	private String woceComment;
	
	static {
		if (null == columnNames) {
			columnNames = new ArrayList<String>();
			columnNames.add(COL_CO2_TYPE);
			columnNames.add(COL_DATE);
			columnNames.add(COL_LONGITUDE);
			columnNames.add(COL_LATITUDE);
			columnNames.add(COL_INTAKE_TEMP_1);
			columnNames.add(COL_INTAKE_TEMP_2);
			columnNames.add(COL_INTAKE_TEMP_3);
			columnNames.add(COL_SALINITY_1);
			columnNames.add(COL_SALINITY_2);
			columnNames.add(COL_SALINITY_3);
			columnNames.add(COL_EQT_1);
			columnNames.add(COL_EQT_2);
			columnNames.add(COL_EQT_3);
			columnNames.add(COL_EQP_1);
			columnNames.add(COL_EQP_2);
			columnNames.add(COL_EQP_3);
			columnNames.add(COL_MOISTURE);
			columnNames.add(COL_ATMOSPHERIC_PRESSURE);
			columnNames.add(COL_CO2);
			columnNames.add(COL_MEAN_INTAKE_TEMP);
			columnNames.add(COL_MEAN_SALINITY);
			columnNames.add(COL_MEAN_EQT);
			columnNames.add(COL_MEAN_EQP);
			columnNames.add(COL_TRUE_MOISTURE);
			columnNames.add(COL_DRIED_CO2);
			columnNames.add(COL_CALIBRATED_CO2);
			columnNames.add(COL_PCO2_TE_DRY);
			columnNames.add(COL_PH2O);
			columnNames.add(COL_PCO2_TE_WET);
			columnNames.add(COL_FCO2_TE);
			columnNames.add(COL_FCO2);
			columnNames.add(COL_INTAKE_TEMP_1_USED);
			columnNames.add(COL_INTAKE_TEMP_2_USED);
			columnNames.add(COL_INTAKE_TEMP_3_USED);
			columnNames.add(COL_SALINITY_1_USED);
			columnNames.add(COL_SALINITY_2_USED);
			columnNames.add(COL_SALINITY_3_USED);
			columnNames.add(COL_EQT_1_USED);
			columnNames.add(COL_EQT_2_USED);
			columnNames.add(COL_EQT_3_USED);
			columnNames.add(COL_EQP_1_USED);
			columnNames.add(COL_EQP_2_USED);
			columnNames.add(COL_EQP_3_USED);
		}
	}
	
	public QCRecord(long dataFileId, Instrument instrument, int lineNumber, List<String> dataFields, Flag qcFlag, List<Message> qcComments, Flag woceFlag, String woceComment) throws DataRecordException, MessageException {
		super(dataFields, lineNumber);
		this.dataFileId = dataFileId;
		this.instrument = instrument;
		this.qcFlag = qcFlag;
		setMessages(qcComments, false);
		setFlag(woceFlag);
		this.woceComment = woceComment;
	}

	@Override
	public DateTime getTime() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double getLongitude() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	public double getLatitude() {
		// TODO Auto-generated method stub
		return 0;
	}

	@Override
	protected void setDataValues(List<String> dataFields) throws DataRecordException {
		if (dataFields.size() != columnNames.size()) {
			throw new DataRecordException("Incorrect number of data fields");
		} else {
			fieldValues = dataFields;
		}
	}

	@Override
	public String getValue(String columnName) throws DataRecordException {
		int columnIndex = columnNames.indexOf(columnName);
		
		if (columnIndex < 0) {
			throw new DataRecordException("Column '" + columnName + "' does not exist");
		} else {
			return fieldValues.get(columnIndex);
		}
	}
	
	public long getDataFileId() {
		return dataFileId;
	}
	
	public static String getColumnDisplayName(String columnName, Instrument instrument) {
		// TODO Make display names
		return "TO DO!";
	}
	
	public String getColumnDisplayName(String columnName) {
		return getColumnDisplayName(columnName, instrument);
	}
	
	public Flag getQCFlag() {
		return qcFlag;
	}
	
	public void setQCFlag(Flag flag) {
		this.qcFlag = flag;
	}
	
	public Flag getWoceFlag() {
		return getFlag();
	}
	
	public void setWoceFlag(Flag flag) {
		setFlag(flag);
	}
	
	public String getWoceComment() {
		return woceComment;
	}
	
	public void setWoceComment(String woceComment) {
		this.woceComment = woceComment;
	}

	@Override
	public String getColumnName(int columnIndex) throws DataRecordException {
		if (columnIndex < 1 || columnIndex >= columnNames.size()) {
			throw new DataRecordException("Invalid column index '" + columnIndex + "'");
		} else {
			return columnNames.get(columnIndex - 1);
		}
	}

	@Override
	public int getColumnIndex(String columnName) throws DataRecordException {
		int columnIndex = columnNames.indexOf(columnName);
		if (columnIndex == -1) {
			throw new DataRecordException("Invalid column name '" + columnName + "'");
		} else {
			return columnIndex;
		}
	}
	
	public static List<String> getColumnNames() {
		return columnNames;
	}
	
	public void addMessage(Message message, boolean setFlag) {
		super.addMessage(message, false);
		
		if (setFlag) {
			if (message.getFlag().moreSignificantThan(qcFlag)) {
				qcFlag = message.getFlag();
			}
		}
	}
}
