package uk.ac.exeter.QuinCe.data;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeSet;

import org.joda.time.DateTime;

import uk.ac.exeter.QCRoutines.config.ColumnConfig;
import uk.ac.exeter.QCRoutines.data.DataRecord;
import uk.ac.exeter.QCRoutines.data.DataRecordException;
import uk.ac.exeter.QCRoutines.data.NoSuchColumnException;
import uk.ac.exeter.QCRoutines.messages.Flag;
import uk.ac.exeter.QCRoutines.messages.Message;
import uk.ac.exeter.QCRoutines.messages.MessageException;
import uk.ac.exeter.QuinCe.utils.DateTimeUtils;
import uk.ac.exeter.QuinCe.utils.InvalidDateTimeStringException;

/**
 * An implementation of the QC Routines DataRecord class for QuinCe
 * 
 * As well as the per-column flags of the DataRecord, this class
 * records two record-level flags and related comments:
 * 
 * QC Flag - A flag generated by the QC routines
 * QC Comments - Stored as Message objects in the parent DataRecord class (use addMessage etc.)
 * WOCE Flag - A flag set by the user
 * WOCE Comments - a simple String stored in this class
 * 
 * @author Steve Jones
 *
 */
public class QCRecord extends DataRecord {
	
	private long dataFileId;
	
	private Instrument instrument;
	
	private Flag qcFlag = Flag.NOT_SET;
	
	private Flag woceFlag = Flag.NOT_SET;
	
	private String woceComment;
	
	private static final int FIELD_DATE_TIME = 2;

	private static final int FIELD_LONGITUDE = 3;

	private static final int FIELD_LATITUDE = 4;
	
	public QCRecord(long dataFileId, Instrument instrument, ColumnConfig columnConfig, int lineNumber, List<String> dataFields, Flag qcFlag, List<Message> qcComments, Flag woceFlag, String woceComment) throws DataRecordException, MessageException {
		super(lineNumber, columnConfig, dataFields);
		this.dataFileId = dataFileId;
		this.instrument = instrument;
		this.qcFlag = qcFlag;
		setMessages(qcComments);
		this.woceFlag = woceFlag;
		this.woceComment = woceComment;
	}

	@Override
	public DateTime getTime() throws DataRecordException {
		String timeString = data.get(FIELD_DATE_TIME).getValue();
		DateTime result = null;
		try {
			result = DateTimeUtils.makeDateTimeFromSql(timeString);
		} catch (InvalidDateTimeStringException e) {
			throw new DataRecordException(lineNumber, "Error occurred while retrieving Date/Time", e);
		}
		
		return result;
	}
	
	@Override
	public TreeSet<Integer> getDateTimeColumns() {
		TreeSet<Integer> columnList = new TreeSet<Integer>();
		columnList.add(FIELD_DATE_TIME);
		return columnList;
	}

	@Override
	public double getLongitude() throws DataRecordException {
		double result = 0;
		try {
			result = Double.parseDouble(data.get(FIELD_LONGITUDE).getValue());
		} catch (NumberFormatException e) {
			throw new DataRecordException(lineNumber, "Invalid longitude value '" + data.get(FIELD_LONGITUDE).getValue() + "'");
		}
		
		return result;
	}

	@Override
	public int getLongitudeColumn() {
		return FIELD_LONGITUDE;
	}
	
	@Override
	public double getLatitude() throws DataRecordException {
		double result = 0;
		try {
			result = Double.parseDouble(data.get(FIELD_LATITUDE).getValue());
		} catch (NumberFormatException e) {
			throw new DataRecordException(lineNumber, "Invalid latitude value '" + data.get(FIELD_LONGITUDE).getValue() + "'");
		}
		
		return result;
	}

	@Override
	public int getLatitudeColumn() {
		return FIELD_LATITUDE;
	}
	
	public long getDataFileId() {
		return dataFileId;
	}
	
	public static String getColumnDisplayName(String columnName, Instrument instrument) {
		// TODO Make display names
		return "TO DO!";
	}
	
	public String getColumnDisplayName(String columnName) {
		return getColumnDisplayName(columnName, instrument);
	}
	
	public Flag getQCFlag() {
		return qcFlag;
	}
	
	public void setQCFlag(Flag flag) {
		this.qcFlag = flag;
	}
	
	public Flag getWoceFlag() {
		return woceFlag;
	}
	
	public void setWoceFlag(Flag flag) {
		woceFlag = flag;
	}
	
	public String getWoceComment() {
		return woceComment;
	}
	
	public void setWoceComment(String woceComment) {
		this.woceComment = woceComment;
	}

	@Override
	public void addMessage(Message message) throws NoSuchColumnException {
		super.addMessage(message);
		
		if (message.getFlag().moreSignificantThan(qcFlag)) {
			qcFlag = message.getFlag();
		}
	}
	
	public void clearQCData() {
		messages = new ArrayList<Message>();
		setQCFlag(Flag.GOOD);
	}
}
