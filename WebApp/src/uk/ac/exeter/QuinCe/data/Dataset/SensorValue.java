package uk.ac.exeter.QuinCe.data.Dataset;

import java.time.LocalDateTime;

import uk.ac.exeter.QuinCe.data.Dataset.QC.Flag;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Routines.AutoQcResult;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Routines.RoutineFlag;

/**
 * Represents a single sensor value
 * @author Steve Jones
 *
 */
public class SensorValue {

  /**
   * The ID of the dataset that the sensor value is in
   */
  private final long datasetId;

  /**
   * The ID of the column that the value is in. Either the ID
   * of a row in the {@code file_column} table, or a special value
   * (e.g. for lon/lat)
   */
  private final long columnId;

  /**
   * The time that the value was measured
   */
  private final LocalDateTime time;

  /**
   * The automatic QC result
   */
  private AutoQcResult autoQc = null;

  /**
   * The user QC flag
   */
  private Flag userQcFlag = Flag.NOT_SET;

  /**
   * The user QC message
   */
  private String userQcMessage = null;

  /**
   * The value (can be null)
   */
  private final String value;

  /**
   * Build a sensor value with default QC flags
   * @param datasetId
   * @param columnId
   * @param time
   * @param value
   */
  public SensorValue(long datasetId, long columnId, LocalDateTime time, String value) {
    this.datasetId = datasetId;
    this.columnId = columnId;
    this.time = time;
    this.value = value;
    this.autoQc = new AutoQcResult();
  }

  /**
   * Build a sensor value with default QC flags
   * @param datasetId
   * @param columnId
   * @param time
   * @param value
   */
  public SensorValue(long datasetId, long columnId, LocalDateTime time, String value,
    Flag autoQcFlag, AutoQcResult autoQc, Flag userQcFlag, String userQcMessage) {

    this.datasetId = datasetId;
    this.columnId = columnId;
    this.time = time;
    this.value = value;

    if (null == autoQc) {
      this.autoQc = new AutoQcResult();
    } else {
      this.autoQc = autoQc;
    }

    this.userQcFlag = userQcFlag;
    this.userQcMessage = userQcMessage;
  }

  /**
   * Get the database ID of the dataset to which this value belongs
   * @return The dataset ID
   */
  public long getDatasetId() {
    return datasetId;
  }

  /**
   * Get the database ID of the file column from which this value was extracted
   * @return The column ID
   */
  public long getColumnId() {
    return columnId;
  }

  /**
   * Get the time that this value was measured
   * @return The measurement time
   */
  public LocalDateTime getTime() {
    return time;
  }

  /**
   * Get the measured value in its original string format
   * @return The value
   */
  public String getValue() {
    return value;
  }

  /**
   * Get the value as a Double. No error checking is performed.
   * Returns {@code null} if the value is {@code null}.
   *
   * @return The value as a Double
   */
  public Double getDoubleValue() {
    Double result = Double.NaN;
    if (null != value) {
      result = new Double(value);
    }

    return result;
  }

  /**
   * Indicates whether or not this value is {@code null}.
   * @return {@code true} if the value is null; {@code false} otherwise.
   */
  public boolean isNaN() {
    return getDoubleValue().isNaN();
  }

  /**
   * Get the overall QC flag resulting from the automatic QC.
   * This will be the most significant flag generated by all QC routines
   * run on the value.
   * @return The automatic QC flag
   */
  public Flag getAutoQcFlag() {
    return autoQc.getOverallFlag();
  }

  /**
   * Get the complete automatic QC result
   * @return The automatic QC result
   */
  public AutoQcResult getAutoQcResult() {
    return autoQc;
  }

  /**
   * Get the QC flag set by the user
   * @return The user QC flag
   */
  public Flag getUserQcFlag() {
    return userQcFlag;
  }

  /**
   * Get the QC message entered by the user
   * @return The user QC message
   */
  public String getUserQcMessage() {
    return userQcMessage;
  }

  public void addAutoQcFlag(RoutineFlag flag) {
    autoQc.add(flag);
  }
}
