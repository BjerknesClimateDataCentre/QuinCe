package uk.ac.exeter.QuinCe.data.Dataset.QC.SensorValues;

import java.util.List;
import java.util.stream.Collectors;

import uk.ac.exeter.QuinCe.data.Dataset.SensorValue;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Flag;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Routine;
import uk.ac.exeter.QuinCe.data.Dataset.QC.RoutineException;
import uk.ac.exeter.QuinCe.data.Dataset.QC.RoutineFlag;
import uk.ac.exeter.QuinCe.data.Instrument.SensorDefinition.SensorType;
import uk.ac.exeter.QuinCe.jobs.files.AutoQCJob;
import uk.ac.exeter.QuinCe.utils.RecordNotFoundException;

/**
 * Base class for automatic QC routines run by the {@link AutoQCJob}.
 *
 * <p>
 * These routines run a single type of check (e.g. a range check) on all the
 * values for a specific {@link SensorType}. Each routine can be configured
 * multiple times with different parameters for different {@link SensorType}s.
 * </p>
 *
 * <p>
 * The automatic QC routines are configured in
 * {@code configuration/qc_routines_config.csv}. This file contains the
 * following columns:
 * </p>
 *
 * <table>
 * <caption>Auto QC routine configuration file columns</caption>
 * <tr>
 * <th>Column</th>
 * <th>Content</th>
 * <tr>
 * <td>Class</td>
 * <td>The truncated class name for the routine. All implementing classes must
 * be in the package {@link uk.ac.exeter.QuinCe.data.Dataset.QC.SensorValues}
 * and have the class name {@code <Name>Routine}. For example, the Range Check
 * routine is defined in
 * {@code uk.ac.exeter.QuinCe.data.Dataset.QC.SensorValues.RangeCheckRoutine.java}.</td>
 * </tr>
 * <tr>
 * <td>Sensor Type</td>
 * <td>The {@link SensorType} on which the check should be run.</td>
 * </tr>
 * <tr>
 * <td>Option...</td>
 * <td>The options for the routine (one option per column). Each routine can
 * required a different number of option columns, which will be loaded into the
 * {@link #parameters} field. The {@link #validateParameters()} method should
 * check that the necessary number of options is provided, and that they have
 * acceptable values.</td>
 * </table>
 */
public abstract class AbstractAutoQCRoutine implements Routine {

  /**
   * The {@link SensorType} whose values are to be checked by this routine
   * instance. Specified in {@code configuration/qc_routines_config.csv}.
   */
  protected SensorType sensorType;

  /**
   * The parameters for the routine. Specified in
   * {@code configuration/qc_routines_config.csv}.
   */
  protected List<String> parameters = null;

  /**
   * Base constructor. Does nothing.
   */
  public AbstractAutoQCRoutine() {
  }

  /**
   * Sets the routine's parameters as specified in the configuration file. Also
   * triggers {@link #validateParameters()} to check them.
   *
   * @param parameters
   *          The parameters.
   * @throws RoutineException
   *           If the parameters are invalid.
   */
  protected void setParameters(List<String> parameters)
    throws RoutineException {
    this.parameters = parameters;
    validateParameters();
  }

  /**
   * Set the {@link SensorType} whose values are to be checked by this routine.
   *
   * @param sensorType
   *          The {@link SensorType}.
   */
  public void setSensorType(SensorType sensorType) {
    this.sensorType = sensorType;
  }

  /**
   * Validate the parameters set by the {@link #setParameters(List)} method.
   *
   * @throws RoutineException
   *           If the parameters are invalid
   */
  protected abstract void validateParameters() throws RoutineException;

  /**
   * Filter a list of {@link SensorValue} objects to remove any {@code NaN}
   * values.
   *
   * <p>
   * For many QC routines, {@code NaN} values should be omitted from the check
   * as they will affect the statistics of the time series in undesired ways.
   * This is a convenience method for those routines to call to get rid of them
   * before analysis.
   * </p>
   *
   * @param values
   *          The values to be filtered.
   * @return The filtered list.
   */
  protected List<SensorValue> filterMissingValues(List<SensorValue> values) {
    return values.stream().filter(x -> !x.isNaN()).collect(Collectors.toList());
  }

  /**
   * Add a QC flag to a {@link SensorValue}.
   *
   * The message for the {@link Flag} is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   *
   * @param value
   *          The {@link SensorValue} to be flagged.
   * @param flag
   *          The flag to apply.
   * @param requiredValue
   *          The required value for the routine.
   * @param actualValue
   *          The value encountered.
   * @throws RoutineException
   *           If the flag assignment fails.
   *
   * @see RoutineFlag#getRequiredValue()
   * @see RoutineFlag#getActualValue()
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue,
    String actualValue) throws RoutineException {

    try {
      value
        .addAutoQCFlag(new RoutineFlag(this, flag, requiredValue, actualValue));
    } catch (RecordNotFoundException e) {
      throw new RoutineException("Sensor Value ID is not stored in database");
    }
  }

  /**
   * Add a QC flag to a {@link SensorValue}.
   *
   * The message for the {@link Flag} is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   *
   * @param value
   *          The {@link SensorValue} to be flagged.
   * @param flag
   *          The flag to apply.
   * @param requiredValue
   *          The required value for the routine.
   * @param actualValue
   *          The value encountered.
   * @throws RoutineException
   *           If the flag assignment fails.
   *
   * @see RoutineFlag#getRequiredValue()
   * @see RoutineFlag#getActualValue()
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue,
    Double actualValue) throws RoutineException {
    addFlag(value, flag, String.valueOf(requiredValue),
      String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a {@link SensorValue}.
   *
   * The message for the {@link Flag} is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   *
   * @param value
   *          The {@link SensorValue} to be flagged.
   * @param flag
   *          The flag to apply.
   * @param requiredValue
   *          The required value for the routine.
   * @param actualValue
   *          The value encountered.
   * @throws RoutineException
   *           If the flag assignment fails.
   *
   * @see RoutineFlag#getRequiredValue()
   * @see RoutineFlag#getActualValue()
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue,
    long actualValue) throws RoutineException {
    addFlag(value, flag, String.valueOf(requiredValue),
      String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a {@link SensorValue}.
   *
   * The message for the {@link Flag} is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   *
   * @param value
   *          The {@link SensorValue} to be flagged.
   * @param flag
   *          The flag to apply.
   * @param requiredValue
   *          The required value for the routine.
   * @param actualValue
   *          The value encountered.
   * @throws RoutineException
   *           If the flag assignment fails.
   *
   * @see RoutineFlag#getRequiredValue()
   * @see RoutineFlag#getActualValue()
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue,
    Double actualValue) throws RoutineException {
    addFlag(value, flag, requiredValue, String.valueOf(actualValue));
  }

  /**
   * Check that this routine has been properly initialised before running it.
   *
   * This checks that {@link #setSensorType(SensorType)} and
   * {@link #setParameters(List)} have been called to set their values. Note
   * that it does not check that the {@link #parameters} are valid; this will
   * have already been done by {@link #setParameters(List)}.
   *
   * @throws RoutineException
   *           If the routine has not been set up.
   */
  protected void checkSetup() throws RoutineException {
    if (null == sensorType) {
      throw new RoutineException("SensorType not set");
    }

    if (null == parameters) {
      throw new RoutineException("Routine parameters not set");
    }
  }
}
