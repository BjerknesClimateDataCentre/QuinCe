package uk.ac.exeter.QuinCe.data.Dataset.QC.SensorValues;

import java.util.List;
import java.util.stream.Collectors;

import uk.ac.exeter.QuinCe.data.Dataset.SensorValue;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Flag;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Routine;
import uk.ac.exeter.QuinCe.data.Dataset.QC.RoutineException;
import uk.ac.exeter.QuinCe.data.Dataset.QC.RoutineFlag;
import uk.ac.exeter.QuinCe.data.Instrument.SensorDefinition.SensorType;
import uk.ac.exeter.QuinCe.utils.RecordNotFoundException;

public abstract class AbstractAutoQCRoutine implements Routine {

  /**
   * The {@link SensorType} of values to be checked by this routine instance.
   */
  protected SensorType sensorType;

  /**
   * The parameters for the routine
   */
  protected List<String> parameters = null;

  public AbstractAutoQCRoutine() {
  }

  protected void setParameters(List<String> parameters)
    throws RoutineException {
    this.parameters = parameters;
    validateParameters();
  }

  public void setSensorType(SensorType sensorType) {
    this.sensorType = sensorType;
  }

  /**
   * Validate the parameters
   *
   * @throws RoutineException
   *           If the parameters are invalid
   */
  protected abstract void validateParameters() throws RoutineException;

  /**
   * Filter a list of {@link SensorValue} objects to remove any NaN values.
   *
   * @param values
   *          The values to be filtered.
   * @return The filtered list.
   */
  protected List<SensorValue> filterMissingValues(List<SensorValue> values) {
    return values.stream().filter(x -> !x.isNaN()).collect(Collectors.toList());
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   * @param value
   *          The value
   * @param flag
   *          The flag
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue,
    String actualValue) throws RoutineException {

    try {
      value
        .addAutoQCFlag(new RoutineFlag(this, flag, requiredValue, actualValue));
    } catch (RecordNotFoundException e) {
      throw new RoutineException("Sensor Value ID is not stored in database");
    }
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   * @param value
   *          The value
   * @param flag
   *          The flag
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue,
    Double actualValue) throws RoutineException {
    addFlag(value, flag, String.valueOf(requiredValue),
      String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   * @param value
   *          The value
   * @param flag
   *          The flag
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue,
    long actualValue) throws RoutineException {
    addFlag(value, flag, String.valueOf(requiredValue),
      String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   *
   * @param value
   *          The value
   * @param flag
   *          The flag
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue,
    Double actualValue) throws RoutineException {
    addFlag(value, flag, requiredValue, String.valueOf(actualValue));
  }

  protected void checkSetup() throws RoutineException {
    if (null == sensorType) {
      throw new RoutineException("SensorType not set");
    }

    if (null == parameters) {
      throw new RoutineException("Routine parameters not set");
    }
  }
}
