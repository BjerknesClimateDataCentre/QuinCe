package uk.ac.exeter.QuinCe.data.Dataset.QC.Routines;

import java.util.List;

import uk.ac.exeter.QuinCe.data.Dataset.SensorValue;
import uk.ac.exeter.QuinCe.data.Dataset.QC.Flag;

/**
 * The base class for a QC routine. These classes will be called
 * to check the data after it's been read and processed for missing/
 * out of range values.
 */
public abstract class Routine {

  /**
   * The parameters for the routine
   */
  protected List<String> parameters;

  /**
   * Basic constructor
   * @param parameters The parameters
   * @throws RoutineException If the parameters are invalid
   */
  public Routine(List<String> parameters) throws RoutineException {
    this.parameters = parameters;
    validateParameters();
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   * @param value The value
   * @param flag The flag
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue, String actualValue) {
    value.addAutoQcFlag(new RoutineFlag(this, flag, requiredValue, actualValue));
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   * @param value The value
   * @param flag The flag
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue, Double actualValue) {
    addFlag(value, flag, String.valueOf(requiredValue), String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   * @param value The value
   * @param flag The flag
   */
  protected void addFlag(SensorValue value, Flag flag, Double requiredValue, long actualValue) {
    addFlag(value, flag, String.valueOf(requiredValue), String.valueOf(actualValue));
  }

  /**
   * Add a QC flag to a value. The QC message is generated by calling
   * {@link #getShortMessage()} or {@link #getShortMessage()}.
   * @param value The value
   * @param flag The flag
   */
  protected void addFlag(SensorValue value, Flag flag, String requiredValue, Double actualValue) {
    addFlag(value, flag, requiredValue, String.valueOf(actualValue));
  }

  /**
   * Validate the parameters
   * @throws RoutineException If the parameters are invalid
   */
  protected abstract void validateParameters() throws RoutineException;

  /**
   * Perform the QC
   * @param values The values to be QCed
   */
  public abstract void qcValues(List<SensorValue> values) throws RoutineException;

  /**
   * Get the short form message for this routine
   * @return The short QC message
   */
  public abstract String getShortMessage();

  /**
   * Get the long form message for this routine
   * @param requiredValue The value required be the routine
   * @param actualValue The actual data value
   * @return The short QC message
   */
  public abstract String getLongMessage(String requiredValue, String actualValue);
}
