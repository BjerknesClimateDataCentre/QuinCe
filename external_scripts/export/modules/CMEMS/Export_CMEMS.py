
'''
Functions specific to communication with Copernicus.

Files to Copernicus must be on netcdf format.

Files are sent to Copernicus by FTP. 

The Copernicus FTP requires an Index file and a DNT file describing all 
files uploaded to the server to complete the ingestion. 
The index file reflects all the files in the FTP folder.
The DNT file triggers the ingestion. 

Example of DNT file format provided by mail from Antoine.Queric@ifremer.fr 2019-03-07
<?xml version="1.0" ?>
<delivery PushingEntity="CopernicusMarine-InSitu-Global" date="20190306T070107Z" product="INSITU_GLO_CARBON_NRT_OBSERVATIONS_013_049">
  <dataset DatasetName="NRT">
    <file Checksum="936999b6a47731e8aa763ec39b3af641" FileName="latest/20190306/A.nc" FinalStatus="Delivered" StartUploadTime="20190306T070107Z" StopUploadTime="20190306T070107Z"/>
    <file Checksum="d763859d86284add3395067fe9f8e3a0" FileName="latest/20190306/B.nc" FinalStatus="Delivered" StartUploadTime="20190306T070108Z" StopUploadTime="20190306T070108Z"/>

    <file FileName="latest/20190306/C.nc">
      <KeyWord>Delete</KeyWord>
    </file>

  </dataset>
</delivery> 

Example of index file format provided by Corentin.Guyot@ifremer.fr 2019-03-06
# Title : Carbon in-situ observations catalog 
# Description : catalog of available in-situ observations per platform. 
# Project : Copernicus 
# Format version : 1.0 
# Date of update : 20190305080103 
# catalog_id,file_name,geospatial_lat_min,geospatial_lat_max,geospatial_lon_min,geospatial_lon_max,time_coverage_start,time_coverage_end,provider,date_update,data_mode,parameters 
COP-GLOBAL-01,ftp://nrt.cmems-du.eu/Core/INSITU_GLO_CARBON_NRT_OBSERVATIONS_013_049/nrt/latest/20190221/GL_LATEST_PR_BA_7JXZ_20190221.nc,19.486,19.486,-176.568,-176.568,2019-02-21T17:50:00Z,2019-02-21T17:50:00Z,Unknown institution,2019-02-24T04:10:11Z,R,DEPH TEMP

To delete en empty directory, you can use the following syntax inside your DNT file :

        <directory DestinationFolderName="" SourceFolderName="directoryName">
          <KeyWord>Delete</KeyWord>
        </directory>


To move an existing file, you can use following syntax in your DNT file :

        <file Checksum="fileChecksum" FileName="path/to/existing/file.nc" NewFileName="path/to/new_folder/file.nc">
            <KeyWord>Move</KeyWord>
        </file>

'''
import logging 
import ftputil 
import os
import sys
import re
import hashlib
import datetime
import pandas as pd
import numpy as np
import netCDF4

import xml.etree.ElementTree as ET
import sqlite3
import json
import time
import toml

from modules.CMEMS.Export_CMEMS_metadata import build_netCDFs, write_nc_bytes_to_file, update_global_attributes, create_metadata_object,build_index,build_index_platform,building_and_uploading_DNT_file,build_fDNT
from modules.CMEMS.Export_CMEMS_ftp import upload_to_copernicus,empty_directory, delete_files_older_than_30days,get_files_ready_for_upload,upload_to_ftp,evaluate_response_file,
from modules.CMEMS.Export_CMEMS_sql import sql_commit, create_connection

with open('config_copernicus.toml') as f: config = toml.load(f)

# Response codes
UPLOADED = 1
NOT_UPLOADED = 0
FAILED_INGESTION = -1

CMEMS_DB = 'files_cmems.db'

LOCAL_FOLDER = 'latest'


def build_dataproduct(dataset_zip,dataset,key):
  '''
  - Transforms csv-file to daily netCDF-files.
  - Creates metadata dictionary containing info on each netCDF file extracted
  - Writes metadata to local sql database
  requires: zip-folder, dataset-object and key
  '''
  if not os.path.exists(local_folder): os.mkdir(local_folder)

  nc_tuples = build_netCDFs(dataset,key,dataset_zip)
   
  nc_dict = {}
  for nc_tuple in nc_tuples:
    (nc_name, nc_content) = nc_tuple
    logging.debug(f'Processing netCDF file {nc_name}')

    nc_filepath = write_nc_bytes_to_file(nc_name,nc_content)

    nc = netCDF4.Dataset(nc_filepath,mode = 'r+') # Reading netCDF file to memory
    update_global_attributes(nc) # Adds last update date and history

    nc_dict[nc_name] = create_metadata_object(nc,nc_name,nc_content,nc_filepath,dataset)

  c = create_connection(CMEMS_DB)
  sql_commit(nc_dict,c)


def upload_to_copernicus(server,dataset,platform):
  '''
  - Creates a FTP-connection
  - Uploads netCDF files
  - Creates and uploads index file and DNT file(s).
  - Checks response file generated by cmems to identify any failed uploads.

  ftp_config contains login information
  '''

  status = 0
  error_msg = ''

  # create ftp-connection
  with ftputil.FTPHost(
    host=config['Copernicus'][server],
    user=config['Copernicus']['user'],
    passwd=config['Copernicus']['password'])as ftp:

    c = create_connection(CMEMS_DB)

    if empty_directory(ftp): # CHECK IF FTP IS EMPTY 
      dnt_delete = delete_files_older_than_30days(c) 

      ready_for_upload,status = get_files_ready_for_upload(c,status)
      
      dnt_upload = {}
      for file in ready_for_upload:
        filename, filepath_local  = file[0], file[2]
        
        upload_result, dnt_upload[filename], status,error_msg = (
          upload_to_ftp(ftp, filepath_local,error_msg))

      if dnt_upload or dnt_delete: # dnt_upload lists all files to be uploaded, dnt_delete to be deleted 
        # INDEX file
        index_filename = build_index(c)
        if index_filename: 
          upload_result, dnt_upload[index_filename], status,error_msg = upload_to_ftp(ftp, index_filename,error_msg)

        # INDEX platform
        index_platform,status,error_msg = build_index_platform(c,platform,error_msg)
        if index_platform:
          upload_result, dnt_upload[index_platform], status,error_msg = upload_to_ftp(ftp, index_platform,error_msg)
          logging.debug(f'index platform upload result: {upload_result}')

        try:
          status,error_msg = building_and_uploading_DNT_file(dnt_upload,dnt_delete,error_msg)

          try:
            response = evaluate_response_file(
              ftp,dnt_ftp_filepath,dnt_local_filepath.rsplit('/',1)[0],c)
            logging.debug('cmems dnt-response: {}'.format(response))
            if len(response) == 0: status = 1

          except Exception as e:
            logging.error('No response from CMEMS: ', exc_info=True)
            status = 0
            error_msg += 'No response from CMEMS: ' + str(e)

        except Exception as exception:
          logging.error('Building DNT failed: ', exc_info=True)
          status = 0
          error_msg += 'Building DNT failed: ' + str(exception)

        # FOLDER CLEAN UP
        if dnt_delete:
          logging.info('Delete empty directories')
          try: 
            _, dnt_local_filepath_f = build_fDNT(dnt_delete)

            _, dnt_ftp_filepath_f, _, _,status,error_msg = (
              upload_to_ftp(ftp, ftp_config, dnt_local_filepath_f,error_msg))  
            try:
              response = evaluate_response_file(
                ftp,dnt_ftp_filepath_f,dnt_local_filepath_f.rsplit('/',1)[0],c)
              logging.debug('cmems fDNT-response, delete empty folders: {}'.format(response))

            except Exception as e:
              logging.error('No response from CMEMS: ', exc_info=True)
              error_msg += 'No response from CMEMS: ' + str(e)

          except Exception as e:
            logging.error('Uploading fDNT failed: ', exc_info=True)
            error_msg += 'Uploading fDNT failed: ' + str(e)

      if status == 0:
        logging.error('Upload failed')
        
    return status, error_msg
